{"version":3,"names":["$","fn","accord","options","settings","extend","independentPanels","autoScroll","activeClass","togglerClass","itemSelector","headingSelector","panelSelector","this","hide","each","on","e","preventDefault","$items","$panels","$parentItem","target","closest","hasClass","deactivateItems","addClass","getPanelsByItems","slideDown","$panel","eq","stop","animate","scrollTop","offset","top","window","height","off","siblings","filter","children","i","existingAnchor","length","wrapInner","href","class","removeClass","$panelsToHide","slideUp","find"],"sources":["../../source/scripts/jquery.accord.js"],"sourcesContent":["/* RJ 2.14.2014\n** \n** Turns an element into an accordion with sections that hide and reveal when \n** corresponding togglers are clicked.\n** \n** Element selectors are relative to the element .accord() is initialized on\n** and will not match descendants within the panels, only direct children.\n**\n** .accord should be called on a parent container of the accordion elements.\n** \n** Options are explained inline below.\n** \n** Default option set expects the following markup structure:\n**\n**\t\t.accord\n**\t\t\t.accord-item\n**\t\t\t\t.accord-heading\n**\t\t\t\t.accord-panel\n**\n** Example with customized class names and selectors:\n**\n**\t\t#expandocollapser\n**\t\t\tsection\n**\t\t\t\th3\n**\t\t\t\tdiv\n**\t\t\tsection\n**\t\t\t\th3\n**\t\t\t\tdiv\n** \n**\t\t$(\"#expandocollapser\").accord(\n**\t\t\t{\n**\t\t\t\titemSelector: \"section\",\n**\t\t\t\theadingSelector: \"h3\",\n**\t\t\t\tpanelSelector: \"h3 + div\"\n**\t   \t\t}\n**\t\t);\n*/\n\n$.fn.accord = function(options) {\n\n\t/* ----- Settings ----- */\n\n\tvar defaultOptions = {\n\t\tindependentPanels: true, // bool: Set to false to force closing other panels when one is activated.\n\t\tautoScroll: true, // bool: Set to false to disable automatic scrolling to activated panels.\n\t\tactiveClass: \"accord-active\", // str: The class that is applied to activated items. Not a full selector, so do not include a dot (.).\n\t\ttogglerClass: \"accord-toggle\", // str: The class that is applied to the generated A toggler. Not a full selector, so do not include a dot (.).\n\t\titemSelector: \".accord-item\", // str: Selector of the parent wrapper of each accordion section. Should be a full selector, ie, \".accordionItem\" or \"ul > li\". This selector will only be used within the context of the individual accordion.\n\t\theadingSelector: \".accord-heading\", // str: Selector of the panel heading into which the generated togglers will be injected. Should be a full selector, ie, \".injectionTarget\" or \"li > h3\". This selector will only be used within the context of the individual accordion.\n\t\tpanelSelector: \".accord-panel\", // str: Selector of the area to be revealed/hidden. Should be a full selector, ie, \".collapsibleRegion\" or \"h3 + div\". This selector will only be used within the context of the individual accordion.\n\t};\n\tvar settings = $.extend({}, defaultOptions, options);\n\n\t// Initialize: hide all panels.\n\t$(settings.panelSelector, this).hide();\n\n\n\n\t/* ----- The magic ----- */\n\n\treturn this.each(\n\t\tfunction() {\n\n\t\t\t// Attach handler for the toggler clicks. We'll use event delegation since the\n\t\t\t// togglers may be dynamically injected; plus, with ED, we only have to do this\n\t\t\t// once per accordion rather than per accordion item.\n\t\t\t  $(this).on(\n\t\t\t\t   \"click\",\n\t\t\t\t   $(\".\" + settings.togglerClass),\n\t\t\t\t   function(e) {\n\t\t\t\t\te.preventDefault();\n\t\n\t\t\t\t\t // The parent item that wraps both the toggler and\n\t\t\t\t\t // the panel. This is what we attach the active state to.\n\t\t\t\t\t var $parentItem = $(e.target).closest(settings.itemSelector);\n\t\n\t\t\t\t\t // item is active ? deactivate it : activate it.\n\t\t\t\t\t if ($parentItem.hasClass(settings.activeClass)) {\n\t\t\t\t\t\t deactivateItems($parentItem);\n\t\t\t\t\t } else {\n\t\t\t\t\t\t activateItems($parentItem);\n\t\n\t\t\t\t\t\t // If the independentPanels setting is set to false,\n\t\t\t\t\t\t // we need to close any currently open panels.\n\t\t\t\t\t\t if (!settings.independentPanels) {\n\t\t\t\t\t\t\t var $itemsToDeactivate = $parentItem\n\t\t\t\t\t\t\t\t\t .siblings(settings.itemSelector)\n\t\t\t\t\t\t\t\t\t .filter(\".\" + activeClass);\n\t\t\t\t\t\t\t deactivateItems($itemsToDeactivate);\n\t\t\t\t\t\t }\n\t\t\t\t\t }\n\t\t\t\t }\n\t\t\t  );\n\n\t\t\t// Make sure every accordion item has an anchor for toggling the panel\n\t\t\t$(this).children(settings.itemSelector).each(\n\t\t\t\tfunction (i,e) {\n\n\t\t\t\t\tvar existingAnchor = $(this).children(settings.headingSelector).children(\"a\");\n\n\t\t\t\t\t// If the panel heading is already linked, go ahead and use the\n\t\t\t\t\t// existing anchor, adding the togglerClass if necessary.\n\t\t\t\t\t// Otherwise, create and inject one ourselves.\n\t\t\t\t\tif (existingAnchor.length) {\n\t\t\t\t\t\tif (!existingAnchor.hasClass(settings.togglerClass)) {\n\t\t\t\t\t\t\texistingAnchor.addClass(settings.togglerClass);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$(settings.headingSelector, this).wrapInner(createToggler());\n\t\t\t\t\t}\n\t\t\t\t   \n\t\t\t\t}\n\t\t\t\t\n\t\t\t);\n\n\t\t}\n\t);\n\n\n\n\t/* ----- Helpers  ----- */\n\n\tfunction activateItems ($items) {\n\t\t$items.addClass(settings.activeClass);\n\t\tvar $panelsToShow = getPanelsByItems($items);\n\t\tshowPanels($panelsToShow);\n\t}\n\n\tfunction deactivateItems ($items) {\n\t\t$items.removeClass(settings.activeClass);\n\t\tvar $panelsToHide = getPanelsByItems($items);\n\t\thidePanels($panelsToHide);\n\t}\n\n\tfunction showPanels ($panels) {\n\t\t$panels.slideDown(function() {\n\t\t\tif (settings.autoScroll) {\n\t\t\t\tscrollToPanel($panels.eq(0));\n\t\t\t}\n\t\t});\n\t};\n\n\tfunction hidePanels ($panels) {\n\t\t$panels.slideUp();\n\t};\n\n\tfunction createToggler() {\n\t\treturn $(\"<a></a>\", {\n\t\t\thref: \"#\",\n\t\t\tclass: settings.togglerClass\n\t\t});\n\t};\n\n\tfunction getPanelsByItems($items) {\n\t\treturn $items.find(settings.panelSelector);\n\t};\n\n\tfunction scrollToPanel($panel) {\n\n\t\t // Stop the automatic scroll effect if user scrolls\n\t\t // manually to avoid an epic battle of wills between\n\t\t // user and scrollbar (and an upleasant stutter)\n\t\t$('html, body').on(\n\t\t\t \"scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove\",\n\t\t\t function (e) {\n\t\t\t\t  $('html, body').stop();\n\t\t\t }\n\t\t);\n\n\t\t$('html, body').stop().animate(\n\t\t\t {\n\t\t\t\t scrollTop: $panel.offset().top - $(window).height() * .1\n\t\t\t },\n\t\t\t 750,\n\t\t\t function () {\n\t\t\t\t  $('html, body').off(\"scroll mousedown wheel DOMMouseScroll mousewheel keyup touchmove\");\n\t\t\t }\n\t\t);\n\n\t};\n \n};"],"mappings":"aAsCAA,EAAEC,GAAGC,OAAS,SAASC,GAItB,IASIC,EAAWJ,EAAEK,OAAO,CAAC,EATJ,CACpBC,mBAAmB,EACnBC,YAAY,EACZC,YAAa,gBACbC,aAAc,gBACdC,aAAc,eACdC,gBAAiB,kBACjBC,cAAe,iBAE4BT,GAS5C,OANAH,EAAEI,EAASQ,cAAeC,MAAMC,OAMzBD,KAAKE,MACX,WAKGf,EAAEa,MAAMG,GACN,QACAhB,EAAE,IAAMI,EAASK,eACjB,SAASQ,GACXA,EAAEC,iBAID,IAgDmBC,EAYHC,EA5DZC,EAAcrB,EAAEiB,EAAEK,QAAQC,QAAQnB,EAASM,cAG3CW,EAAYG,SAASpB,EAASI,aACjCiB,EAAgBJ,KA4CEF,EA1CJE,GA2CZK,SAAStB,EAASI,cAWLY,EAVAO,EAAiBR,IAW7BS,WAAU,WAsBnB,IAAuBC,EArBjBzB,EAASG,aAqBQsB,EApBNT,EAAQU,GAAG,GAyB3B9B,EAAE,cAAcgB,GACd,oEACA,SAAUC,GACRjB,EAAE,cAAc+B,MAClB,IAGF/B,EAAE,cAAc+B,OAAOC,QACrB,CACCC,UAAWJ,EAAOK,SAASC,IAA2B,GAArBnC,EAAEoC,QAAQC,UAE5C,KACA,WACErC,EAAE,cAAcsC,IAAI,mEACtB,IArCF,IAvDUlC,EAASE,mBAIbmB,EAHyBJ,EACtBkB,SAASnC,EAASM,cAClB8B,OAAO,IAAMhC,cAInB,IAIFR,EAAEa,MAAM4B,SAASrC,EAASM,cAAcK,MACvC,SAAU2B,EAAEzB,GAEX,IAAI0B,EAAiB3C,EAAEa,MAAM4B,SAASrC,EAASO,iBAAiB8B,SAAS,KAKrEE,EAAeC,OACbD,EAAenB,SAASpB,EAASK,eACrCkC,EAAejB,SAAStB,EAASK,cAGlCT,EAAEI,EAASO,gBAAiBE,MAAMgC,UAuC/B7C,EAAE,UAAW,CACnB8C,KAAM,IACNC,MAAO3C,EAASK,eAtCf,GAIF,IAaD,SAASgB,EAAiBN,GACzBA,EAAO6B,YAAY5C,EAASI,aAC5B,IAAIyC,EAAgBtB,EAAiBR,GAC1B8B,EAYHC,SAXT,CAqBA,SAASvB,EAAiBR,GACzB,OAAOA,EAAOgC,KAAK/C,EAASQ,cAC7B,CA0BD","ignoreList":[]}